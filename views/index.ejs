<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <link rel="stylesheet" type="text/css" href="style.css">
        <link rel="stylesheet" type="text/css" href="var_assets.css">

        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
        <script src="scripts/charScript.js"></script>
        <script src="scripts/messageScript.js"></script>

        <script src="scripts/toggleScript.js"></script>

        <script type="text/javascript" src='http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js'></script>
        <link rel="icon" href="img/poke.ico">

        <link rel="icon" href="poke.ico" type="image/x-icon">
        <title>Pokemon</title>
    </head>
        <body>
            <div class="exterior_viewport">   

                    <div id="gameboy" class="shadow"></div>
                    <div id="border"></div>
                    <div id="text">
                        <div class="text_inside">
                            <div id="text_output"></div>
                        </div>
                    </div>
                    <div class="info_frame">    
                        <div class ="contain_vid_info">
                            <h1> <%= c.title %> </h1>

                            <p>Welcome to Poke'Der.  </br> </br>
                            It's pretty dumb.</br> </br>
                           's' search high grass</br> </br> arrows keys to movie</br> </br> 'spacebar' to inspect world</br> </br> 'e' to travel</p>
                           <button class="toggle_button"  onclick="toggleView()" value="Toggle View"> Toggle View</button>
                           <div class="music_player">
                               <i onclick="toggleAudio('pause')" class="fas fa-pause-circle"></i>
                               <i onclick="toggleAudio('play')" class="fas fa-play-circle"></i>
                               <span> Play Music</span>
                            </div>
                        </div>     
                    </div>  
            </div>

            <div id="viewport">
                <div id ="gameContainer">
                    <div id='game'></div>
                    <div id='mainCharacter'></div>
                </div>
            </div>  
         
            <script type ='text/javascript'> 
               window.addEventListener("keydown", function(e) {
                    if([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
                    e.preventDefault();
                    }
                }, false);

// ****************************************  future note, for when $world_module data gets too huge, implement document.ready with Jquery loading screen! ********************************************** 
            var $world_module; // IT WORKED!!!!!!!! modular functions galore 
            jQuery.ajax({url: "http://localhost:8000/world_mod", type: "GET", dataType: "json", async: false, 
                    success: function (data) {
                        console.log(data)
                        return  $world_module = data;  
                    },
                }); 
             
            // ********************************** Module assignment ********************************** //
            var currentWorld = $world_module.worlds.starting_area; 
            var fun = $world_module.changeChar
            var currentTrack;
            var playMusic = true;
            var in_front_char = null

            var temp_track;
            var world_y_pos = currentWorld.starting_coordinates.world.y
            var world_x_pos = currentWorld.starting_coordinates.world.x
            // ********************************** Module assignment ********************************** //

            

            function shiftWorld(direction) {
              var directions = {
                    left: () => { $('#gameContainer').animate({"left": `${world_x_pos += 20}px`}, 60);},
                    top: () => { $('#gameContainer').animate({"top": `${world_y_pos += 20}px`},  60);},
                    right: () => { $('#gameContainer').animate({"left":`${world_x_pos -= 20}px`},  60);},
                    down: () => {$('#gameContainer').animate({"top":`${world_y_pos -= 20}px`},  60);}
                }
                directions[`${direction}`]();
                console.log(`world_y_pos: ${world_y_pos}`);
                console.log(`world_x_pos: ${world_x_pos}`); // reset these with world traversal
            }

                var mainCharacter = {
                    name: 'mainCharacter',
                    path: 'assets/characters/mainCharacter/mainCharacter_',
                    x: 6,
                    y: 7
            }

            
            function m (tilepath) {
                return `assets/${tilepath.sub_dir}/${tilepath.val}.jpg`
            }

            function displayCharacter(character) {
                $(`#${character.name}`).animate({left: character.x * 20 + 'px', top: character.y * 20 + 'px'}, 100)
            }
            function resetWorldonTraversal(world) {
 
                if(world.starting_coordinates !== null) {  // starting_coordinates: { char : { x: 8, y: 6}, world : { x: 0, y: 0}}, 
                    $('#gameContainer').animate({"left": `${world.starting_coordinates.world.x}px`}, 60); //resets world on traversal OR  world.starting_coordinates
                    $('#gameContainer').animate({"top": `${world.starting_coordinates.world.y}px`},  60);//resets world on traversal world.starting_coordinates
                    world_y_pos = world.starting_coordinates.world.y
                world_x_pos = world.starting_coordinates.world.x
                    mainCharacter.x = world.starting_coordinates.char.x;
                    mainCharacter.y = world.starting_coordinates.char.y;
                }
            }

            function displayWorld(world, in_front_char){
                if(in_front_char !== null ){
                    world.starting_coordinates = in_front_char.starting_coordinates
                }
                resetWorldonTraversal(world) 
                var output;
                for(var i = 0; i  < world.t.length; i++) {
                    output += "\n<div class='row'>"
                    for(var j = 0; j < world.t[i].length; j++){
                        output += `<div> <img id="${(world.t[i][j].val)} ${world.t[i][j].uniC}" src=${m(world.t[i][j])}></div>` // shall be same variable. val the
                    }
                    output += "</div>"
                }    
                displayCharacter(mainCharacter);
                currentWorld = world;
                currentTrack = new Audio(`${currentWorld.audio}`)
                if(playMusic === true) {
                    currentTrack.play().catch()                
                }
                document.getElementById('game').innerHTML = output 
            }
            displayWorld(currentWorld, in_front_char);

       

//removed message script

       var descript_bool = false; // for freezing the character
       var message_length_flag = null;
       var iteration = 0;
       var temp_id = null;
        function descriptTrigger(char_x_mod, char_y_mod) {
            document.getElementById('text').style.display = 'block'
            const in_front_char = currentWorld.t[char_y_mod][char_x_mod];
            var div = document.getElementById('text_output')
                if (in_front_char.static_desc.length > 0) {
                    console.log(iteration);
                    if(!message_length_flag) {
                        descript_bool = true
                        message_length_flag = in_front_char.static_desc.length 
                        div.innerHTML = in_front_char.static_desc[iteration].content
                        iteration += 1;
                    } else {
                        if (iteration < message_length_flag) {
                            div.innerHTML = in_front_char.static_desc[iteration].content
                            iteration += 1;
                        } else {
                            if ( iteration === message_length_flag) {
                                setTimeout(clearMessage, 50);
                                message_length_flag = null;
                                iteration = 0;
                            }
                        }
                    }
                } 
        }
        function searchTrigger(char_x_mod, char_y_mod) {
            const in_front_char = currentWorld.t[char_y_mod][char_x_mod];
            if (in_front_char.val === 'Hgrass') {
                if ( Math.floor(Math.random() * 30) + 1 === 2) {
                    console.log('Pokemon Appears')
                } else {
                    console.log('theres no pokemon in grass')
                }
            } else {
                console.log('Cant search here')
            }
        }
        
        function eventTrigger(char_x_mod, char_y_mod) {
            const in_front_char = currentWorld.t[char_y_mod][char_x_mod];
            if (in_front_char.transport === true) {
                document.getElementById('game').innerHTML = null;
                var next_world = in_front_char['new_world'];
                currentTrack.pause()
                playMusic = false;
                displayWorld($world_module.worlds[`${next_world}`], in_front_char);
            }
        }
        

        function infrontchar(dir, type) {
        const event = {
                left: () => this[type](mainCharacter.x - 1, mainCharacter.y),
                up: () => this[type](mainCharacter.x, mainCharacter.y - 1),
                right: () => this[type](mainCharacter.x + 1, mainCharacter.y),
                down: () => this[type](mainCharacter.x, mainCharacter.y + 1),
            }
                    event[dir]();
        
            }

     
        var battle = false;
        var bag = false;
        var event = false;
        var temp_dir = null
        var descriptor_length = null;
        document.onkeydown = function(which) {
            var keycodes;
            if (descript_bool === true) {
                key_codes = {
                32 : { d: temp_dir, m: () => infrontchar(temp_dir, 'descriptTrigger'), s: () => null}, 
                } 
            } else {
                key_codes = {  
                    69 : {d: temp_dir, m: () => infrontchar(temp_dir, 'eventTrigger'), s: () => null},
                    32 : { d: temp_dir, m: () => infrontchar(temp_dir, 'descriptTrigger'), s: () => null}, 
                    37 : { d: 'left', m: () => {mainCharacter.x--   }, o: () => mainCharacter.x++ , s: () => shiftWorld('left')}, 
                    38: { d: 'up', m: () => {  mainCharacter.y-- }, o: () =>  mainCharacter.y++,  s: () => shiftWorld('top') },  
                    39: { d: 'right', m: () => {  mainCharacter.x++ }, o: () => mainCharacter.x--,  s: () => shiftWorld('right') },
                    40: { d: 'down', m: () => {  mainCharacter.y++ }, o: () => mainCharacter.y--, s: () => shiftWorld('down')},
                    83: {d: temp_dir, m: () => infrontchar(temp_dir, 'searchTrigger'), s: () => null}
                } 
            }
            if (event === true) {

                key_codes = {   // key codes call different functons depending on a event, which ultimately leads to a battle
                    69 : {},
                    32 : { d: temp_dir, m: () => infrontchar(temp_dir, 'descriptTrigger'), s: () => null},  //space
                    37 : { }, 
                    38: { },  
                    39: {  },
                    40: { } 
                } 
            }            
            if (battle === true) {
                key_codes = {   // key codes call different functons depending on a battle happening
                    69 : {},
                    32 : { }, 
                    37 : { }, 
                    38: { },  
                    39: {  },
                    40: { } 
                } 
            }  

         

            console.log(temp_dir)
            if (key_codes[which.keyCode] !== undefined ) {
                temp_dir = key_codes[which.keyCode].d; // for events 
                key_codes[which.keyCode].m()
                 changeChar(mainCharacter, key_codes[which.keyCode].d); // pass Object and direction
                    if(!currentWorld.t[mainCharacter.y][mainCharacter.x].pass){  // if character cant pass object, move it backwards. or ELSE o() doesnt counteract m() and world shifts
                        key_codes[which.keyCode].o()
                    } else {
                        key_codes[which.keyCode].s() // when character moves, camera moves 
                    }
                    if (currentWorld.t[mainCharacter.y][mainCharacter.x].overlap === true) {
                        console.log(document.getElementById(`${currentWorld.t[mainCharacter.y][mainCharacter.x].val}`))
                    } 
                        if (currentWorld.cpus) {
                            // function call to  place cpus in their rooms. function displayCharacter(); 
                            // have display character work for every kind of character.
                        }
                        displayCharacter(mainCharacter);
                }
            }

            </script>
        </body>
</html>